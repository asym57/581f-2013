︠df8fd28b-ae64-479c-a0f3-0a297f75f440︠
set_verbose(2)
︡caf60f4d-cd78-4769-a4c3-438a78f12025︡
︠e38fc968-48b8-465f-98a0-500b36b7ab4e︠
M = ModularSymbols(43)
D = M.cuspidal_submodule().decomposition()
D
︡7b152e0a-d529-4cb9-a99d-fd68e3085212︡{"stdout":"verbose 1 (61: relation_matrix.py, modS_relations) \n"}︡{"stdout":"verbose 1 (61: relation_matrix.py, modS_relations) finished creating S relations (time = 0.0)\n"}︡{"stdout":"verbose 1 (418: relation_matrix.py, relation_matrix_wtk_g0) Starting optimized integer sparse 2-term quotient...\n"}︡{"stdout":"verbose 1 (418: relation_matrix.py, relation_matrix_wtk_g0) finished (time = 0.0)\n"}︡{"stdout":"verbose 1 (162: relation_matrix.py, T_relation_matrix_wtk_g0) \n"}︡{"stdout":"verbose 1 (162: relation_matrix.py, T_relation_matrix_wtk_g0) finished (number of rows=16) (time = 0.004)\n"}︡{"stdout":"verbose 1 (225: relation_matrix.py, gens_to_basis_matrix) Full MatrixSpace of 16 by 44 sparse matrices over Rational Field\n"}︡{"stdout":"verbose 1 (225: relation_matrix.py, gens_to_basis_matrix) putting relation matrix in echelon form (height = 3)\n"}︡{"stdout":"verbose 1 (225: relation_matrix.py, multimod echelon) Multimodular echelon algorithm on 16 x 44 matrix\n"}︡{"stdout":"verbose 2 (225: relation_matrix.py, multimod echelon) height_guess = 1\n"}︡{"stdout":"verbose 2 (225: relation_matrix.py, multimod echelon) echelon modulo p=46337 (33.33% done)\n"}︡{"stdout":"verbose 2 (225: relation_matrix.py, multimod echelon) time to reduce matrix mod p: (time = 0.0)\n"}︡{"stdout":"verbose 1 (225: relation_matrix.py, sparse_matrix_pyx matrix_modint echelon) \n"}︡{"stdout":"verbose 2 (225: relation_matrix.py, matrix_modn_sparse echelon) on column 5 of 44\n"}︡{"stdout":"verbose 2 (225: relation_matrix.py, matrix_modn_sparse echelon) on column 10 of 44\n"}︡{"stdout":"verbose 2 (225: relation_matrix.py, matrix_modn_sparse echelon) on column 15 of 44\n"}︡{"stdout":"verbose 2 (225: relation_matrix.py, matrix_modn_sparse echelon) on column 20 of 44\n"}︡{"stdout":"verbose 2 (225: relation_matrix.py, matrix_modn_sparse echelon) on column 25 of 44\n"}︡{"stdout":"verbose 2 (225: relation_matrix.py, matrix_modn_sparse echelon) on column 30 of 44\n"}︡{"stdout":"verbose 2 (225: relation_matrix.py, matrix_modn_sparse echelon) on column 35 of 44\n"}︡{"stdout":"verbose 2 (225: relation_matrix.py, matrix_modn_sparse echelon) on column 40 of 44\n"}︡{"stdout":"verbose 2 (225: relation_matrix.py, multimod echelon) time to put reduced matrix in echelon form: (time = 0.004001)\n"}︡{"stdout":"verbose 2 (225: relation_matrix.py, multimod echelon) time for pivot compare (time = 0.0)\n"}︡{"stdout":"verbose 2 (225: relation_matrix.py, multimod echelon) now comparing pivots and dropping any bad ones (time = 0.0)\n"}︡{"stdout":"verbose 2 (225: relation_matrix.py, multimod echelon) Lifting a good matrix\n"}︡{"stdout":"verbose 2 (225: relation_matrix.py, multimod echelon) Finished lift (time = 0.0)\n"}︡{"stdout":"verbose 2 (225: relation_matrix.py, multimod echelon) finished comparing pivots (time = 0.0)\n"}︡{"stdout":"verbose 2 (225: relation_matrix.py, multimod echelon) start crt linear combination\n"}︡{"stdout":"verbose 2 (225: relation_matrix.py, multimod echelon) got crt basis (time = 0.0)\n"}︡{"stdout":"verbose 2 (225: relation_matrix.py, multimod echelon) time to take linear combination of matrices over ZZ is (time = 0.0)\n"}︡{"stdout":"verbose 2 (225: relation_matrix.py, multimod echelon) now doing rational reconstruction\n"}︡{"stdout":"verbose 2 (225: relation_matrix.py, multimod echelon) rational reconstruction completed (time = 0.0)\n"}︡{"stdout":"verbose 2 (225: relation_matrix.py, multimod echelon) Validity of result checked.\n"}︡{"stdout":"verbose 2 (225: relation_matrix.py, multimod echelon) total time (time = 0.008001)\n"}︡{"stdout":"verbose 1 (225: relation_matrix.py, gens_to_basis_matrix) finished echelon (time = 0.008001)\n"}︡{"stdout":"verbose 1 (225: relation_matrix.py, gens_to_basis_matrix) Now creating gens --> basis mapping\n"}︡{"stdout":"verbose 1 (225: relation_matrix.py, gens_to_basis_matrix) done doing setup (time = 0.0)\n"}︡{"stdout":"verbose 1 (225: relation_matrix.py, gens_to_basis_matrix) now forming quotient matrix\n"}︡{"stdout":"verbose 1 (225: relation_matrix.py, gens_to_basis_matrix) done making quotient matrix (time = 0.0)\n"}︡{"stdout":"verbose 1 (225: relation_matrix.py, gens_to_basis_matrix) now filling in the rest of the matrix\n"}︡{"stdout":"verbose 1 (225: relation_matrix.py, gens_to_basis_matrix) set 22 rows\n"}︡{"stdout":"verbose 1 (225: relation_matrix.py, gens_to_basis_matrix) time to fill in rest of matrix (time = 0.0)\n"}︡{"stdout":"verbose 1 (626: matrix_morphism.py, kernel) computing left kernel for 7x2 matrix\n"}︡{"stdout":"verbose 1 (626: matrix_morphism.py, kernel) computing a right kernel for 2x7 matrix over Rational Field\n"}︡{"stdout":"verbose 1 (626: matrix_morphism.py, kernel) computing right kernel matrix over the rationals for 2x7 matrix\n"}︡{"stdout":"verbose 1 (626: matrix_morphism.py, kernel) computing null space of 2 x 7 matrix using IML\n"}︡{"stdout":"verbose 1 (626: matrix_morphism.py, kernel) finished computing null space (time = 0.008001)\n"}︡{"stdout":"verbose 1 (626: matrix_morphism.py, kernel) done computing right kernel matrix over the rationals for 2x7 matrix (time = 0.012001)\n"}︡{"stdout":"verbose 1 (626: matrix_morphism.py, kernel) rational in-place Gauss elimination on 6 x 7 matrix\n"}︡{"stdout":"verbose 1 (626: matrix_morphism.py, kernel) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (626: matrix_morphism.py, kernel) done computing a right kernel for 2x7 matrix over Rational Field (time = 0.012001)\n"}︡{"stdout":"verbose 1 (626: matrix_morphism.py, kernel) done computing left kernel for 7x2 matrix (time = 0.012001)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) Decomposing Modular Symbols subspace of dimension 6 of Modular Symbols space of dimension 7 for Gamma_0(43) of weight 2 with sign 0 over Rational Field\n"}︡{"stdout":"verbose 1 (500: ambient_module.py, hecke_bound) WARNING: ambient.py -- hecke_bound; returning unproven guess.\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) p=2 (time = 0.004)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) Decomposition using p=2\n"}︡{"stdout":"verbose 1 (2812: ambient.py, _compute_hecke_matrix_prime) Computing Hecke operator T_2\n"}︡{"stdout":"verbose 1 (2812: ambient.py, _compute_hecke_matrix_prime) Matrix non-reduced (time = 0.0)\n"}︡{"stdout":"verbose 1 (2812: ambient.py, _compute_hecke_matrix_prime) done making non-reduced matrix (time = 0.0)\n"}︡{"stdout":"verbose 1 (2812: ambient.py, _compute_hecke_matrix_prime) start matrix-matrix (7 x 44) times (44 x 7) multiply to get Tp\n"}︡{"stdout":"verbose 1 (2812: ambient.py, _compute_hecke_matrix_prime) done matrix multiply and computing Hecke operator (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) \n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) rational in-place Gauss elimination on 6 x 7 matrix\n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) decompose restriction --  (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) computing charpoly of 6 x 6 matrix using linbox\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) using linbox poly comp\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) computed poly -- now converting back to Sage\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) finished computing charpoly (time = 0.008)\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) factoring the characteristic polynomial\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) done factoring (time = 0.004)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) computing left kernel for 6x6 matrix\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) computing a right kernel for 6x6 matrix over Rational Field\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) computing right kernel matrix over the rationals for 6x6 matrix\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) computing null space of 6 x 6 matrix using IML\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) finished computing null space (time = 0.004001)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) done computing right kernel matrix over the rationals for 6x6 matrix (time = 0.004001)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) rational in-place Gauss elimination on 2 x 6 matrix\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) done with gauss echelon form (time = 0.004)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) done computing a right kernel for 6x6 matrix over Rational Field (time = 0.008001)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) done computing left kernel for 6x6 matrix (time = 0.008001)\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) 5-spinning 0-th random vector\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) done spinning (time = 0.0)\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) 5-spinning 1-th random vector\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) done spinning (time = 0.0)\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) compute element of kernel of g(A), for g of degree 2\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) done computing element of kernel of g(A) (time = 0.0)\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) fill out rest of kernel\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) finished filling out more of kernel (time = 0.0)\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) compute element of kernel of g(A), for g of degree 2\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) done computing element of kernel of g(A) (time = 0.0)\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) fill out rest of kernel\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) finished filling out more of kernel (time = 0.0)\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) now computing row space\n"}︡{"stdout":"verbose 1 (899: module.py, multimod echelon) Multimodular echelon algorithm on 4 x 6 matrix\n"}︡{"stdout":"verbose 2 (899: module.py, multimod echelon) height_guess = 1\n"}︡{"stdout":"verbose 2 (899: module.py, multimod echelon) echelon modulo p=8388593 (33.33% done)\n"}︡{"stdout":"verbose 2 (899: module.py, multimod echelon) time to reduce matrix mod p: (time = 0.004)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) Calling echelonize mod 8388593.\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) done with echelonize (time = 0.0)\n"}︡{"stdout":"verbose 2 (899: module.py, multimod echelon) time to put reduced matrix in echelon form: (time = 0.0)\n"}︡{"stdout":"verbose 2 (899: module.py, multimod echelon) time for pivot compare (time = 0.0)\n"}︡{"stdout":"verbose 2 (899: module.py, multimod echelon) now comparing pivots and dropping any bad ones (time = 0.0)\n"}︡{"stdout":"verbose 2 (899: module.py, multimod echelon) Lifting a good matrix\n"}︡{"stdout":"verbose 2 (899: module.py, multimod echelon) Finished lift (time = 0.0)\n"}︡{"stdout":"verbose 2 (899: module.py, multimod echelon) finished comparing pivots (time = 0.0)\n"}︡{"stdout":"verbose 2 (899: module.py, multimod echelon) start crt linear combination\n"}︡{"stdout":"verbose 2 (899: module.py, multimod echelon) got crt basis (time = 0.0)\n"}︡{"stdout":"verbose 2 (899: module.py, multimod echelon) time to take linear combination of matrices over ZZ is (time = 0.0)\n"}︡{"stdout":"verbose 2 (899: module.py, multimod echelon) now doing rational reconstruction\n"}︡{"stdout":"verbose 2 (899: module.py, multimod echelon) rational reconstruction completed (time = 0.0)\n"}︡{"stdout":"verbose 2 (899: module.py, multimod echelon) Validity of result checked.\n"}︡{"stdout":"verbose 2 (899: module.py, multimod echelon) total time (time = 0.004)\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) computed row space (time = 0.004)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) decomposition --  (time = 0.028001)\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) rational in-place Gauss elimination on 2 x 7 matrix\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) rational in-place Gauss elimination on 4 x 7 matrix\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) Finished. (time = 0.032002)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) p=3 (time = 0.040003)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) Decomposition using p=3\n"}︡{"stdout":"verbose 1 (2812: ambient.py, _compute_hecke_matrix_prime) Computing Hecke operator T_3\n"}︡{"stdout":"verbose 1 (2812: ambient.py, _compute_hecke_matrix_prime) Matrix non-reduced (time = 0.004)\n"}︡{"stdout":"verbose 1 (2812: ambient.py, _compute_hecke_matrix_prime) done making non-reduced matrix (time = 0.0)\n"}︡{"stdout":"verbose 1 (2812: ambient.py, _compute_hecke_matrix_prime) start matrix-matrix (7 x 44) times (44 x 7) multiply to get Tp\n"}︡{"stdout":"verbose 1 (2812: ambient.py, _compute_hecke_matrix_prime) done matrix multiply and computing Hecke operator (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) \n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) rational in-place Gauss elimination on 2 x 7 matrix\n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) decompose restriction --  (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) computing charpoly of 2 x 2 matrix using linbox\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) using linbox poly comp\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) computed poly -- now converting back to Sage\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) finished computing charpoly (time = 0.008)\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) factoring the characteristic polynomial\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) done factoring (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) decomposition --  (time = 0.008)\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) rational in-place Gauss elimination on 2 x 7 matrix\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) Finished. (time = 0.008)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) \n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) rational in-place Gauss elimination on 4 x 7 matrix\n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) decompose restriction --  (time = 0.004001)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) computing charpoly of 4 x 4 matrix using linbox\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) using linbox poly comp\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) computed poly -- now converting back to Sage\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) finished computing charpoly (time = 0.004)\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) factoring the characteristic polynomial\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) done factoring (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) decomposition --  (time = 0.004)\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) rational in-place Gauss elimination on 4 x 7 matrix\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) Finished. (time = 0.012001)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) p=5 (time = 0.064004)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) Decomposition using p=5\n"}︡{"stdout":"verbose 1 (2812: ambient.py, _compute_hecke_matrix_prime) Computing Hecke operator T_5\n"}︡{"stdout":"verbose 1 (2812: ambient.py, _compute_hecke_matrix_prime) Matrix non-reduced (time = 0.0)\n"}︡{"stdout":"verbose 1 (2812: ambient.py, _compute_hecke_matrix_prime) done making non-reduced matrix (time = 0.0)\n"}︡{"stdout":"verbose 1 (2812: ambient.py, _compute_hecke_matrix_prime) start matrix-matrix (7 x 44) times (44 x 7) multiply to get Tp\n"}︡{"stdout":"verbose 1 (2812: ambient.py, _compute_hecke_matrix_prime) done matrix multiply and computing Hecke operator (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) \n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) rational in-place Gauss elimination on 2 x 7 matrix\n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) decompose restriction --  (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) computing charpoly of 2 x 2 matrix using linbox\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) using linbox poly comp\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) computed poly -- now converting back to Sage\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) finished computing charpoly (time = 0.004001)\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) factoring the characteristic polynomial\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) done factoring (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) decomposition --  (time = 0.004001)\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) rational in-place Gauss elimination on 2 x 7 matrix\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) Finished. (time = 0.008001)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) \n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) rational in-place Gauss elimination on 4 x 7 matrix\n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) decompose restriction --  (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) computing charpoly of 4 x 4 matrix using linbox\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) using linbox poly comp\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) computed poly -- now converting back to Sage"}︡{"stdout":"\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) finished computing charpoly (time = 0.004)\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) factoring the characteristic polynomial\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) done factoring (time = 0.004)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) decomposition --  (time = 0.008)\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) rational in-place Gauss elimination on 4 x 7 matrix\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) Finished. (time = 0.008)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) p=7 (time = 0.084005)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) Decomposition using p=7\n"}︡{"stdout":"verbose 1 (2812: ambient.py, _compute_hecke_matrix_prime) Computing Hecke operator T_7\n"}︡{"stdout":"verbose 1 (2812: ambient.py, _compute_hecke_matrix_prime) Matrix non-reduced (time = 0.0)\n"}︡{"stdout":"verbose 1 (2812: ambient.py, _compute_hecke_matrix_prime) done making non-reduced matrix (time = 0.004001)\n"}︡{"stdout":"verbose 1 (2812: ambient.py, _compute_hecke_matrix_prime) start matrix-matrix (7 x 44) times (44 x 7) multiply to get Tp\n"}︡{"stdout":"verbose 1 (2812: ambient.py, _compute_hecke_matrix_prime) done matrix multiply and computing Hecke operator (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) \n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) rational in-place Gauss elimination on 2 x 7 matrix\n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) decompose restriction --  (time = 0.0)\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) factoring the characteristic polynomial\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) done factoring (time = 0.004)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) decomposition --  (time = 0.004)\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) rational in-place Gauss elimination on 2 x 7 matrix\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) Finished. (time = 0.004)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) \n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) rational in-place Gauss elimination on 4 x 7 matrix\n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) decompose restriction --  (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) computing charpoly of 4 x 4 matrix using linbox\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) using linbox poly comp\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) computed poly -- now converting back to Sage\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) finished computing charpoly (time = 0.008)\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) factoring the characteristic polynomial\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) done factoring (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) decomposition --  (time = 0.008)\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) rational in-place Gauss elimination on 4 x 7 matrix\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) Finished. (time = 0.008)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) p=11 (time = 0.100006)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) Decomposition using p=11\n"}︡{"stdout":"verbose 1 (2812: ambient.py, _compute_hecke_matrix_prime) Computing Hecke operator T_11\n"}︡{"stdout":"verbose 1 (2812: ambient.py, _compute_hecke_matrix_prime) Matrix non-reduced (time = 0.0)\n"}︡{"stdout":"verbose 1 (2812: ambient.py, _compute_hecke_matrix_prime) done making non-reduced matrix (time = 0.0)\n"}︡{"stdout":"verbose 1 (2812: ambient.py, _compute_hecke_matrix_prime) start matrix-matrix (7 x 44) times (44 x 7) multiply to get Tp\n"}︡{"stdout":"verbose 1 (2812: ambient.py, _compute_hecke_matrix_prime) done matrix multiply and computing Hecke operator (time = 0.004)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) \n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) rational in-place Gauss elimination on 2 x 7 matrix\n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) decompose restriction --  (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) computing charpoly of 2 x 2 matrix using linbox\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) using linbox poly comp\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) computed poly -- now converting back to Sage\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) finished computing charpoly (time = 0.004)\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) factoring the characteristic polynomial\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) done factoring (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) decomposition --  (time = 0.004)\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) rational in-place Gauss elimination on 2 x 7 matrix\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) Finished. (time = 0.008)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) \n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) rational in-place Gauss elimination on 4 x 7 matrix\n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) decompose restriction --  (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) computing charpoly of 4 x 4 matrix using linbox\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) using linbox poly comp\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) computed poly -- now converting back to Sage\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) finished computing charpoly (time = 0.008001)\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) factoring the characteristic polynomial\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) done factoring (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) decomposition --  (time = 0.008001)\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) rational in-place Gauss elimination on 4 x 7 matrix\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) Finished. (time = 0.012001)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) p=13 (time = 0.128008)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) Decomposition using p=13\n"}︡{"stdout":"verbose 1 (2812: ambient.py, _compute_hecke_matrix_prime) Computing Hecke operator T_13\n"}︡{"stdout":"verbose 1 (2812: ambient.py, _compute_hecke_matrix_prime) Matrix non-reduced (time = 0.0)\n"}︡{"stdout":"verbose 1 (2812: ambient.py, _compute_hecke_matrix_prime) done making non-reduced matrix (time = 0.004)\n"}︡{"stdout":"verbose 1 (2812: ambient.py, _compute_hecke_matrix_prime) start matrix-matrix (7 x 44) times (44 x 7) multiply to get Tp\n"}︡{"stdout":"verbose 1 (2812: ambient.py, _compute_hecke_matrix_prime) done matrix multiply and computing Hecke operator (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) \n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) rational in-place Gauss elimination on 2 x 7 matrix\n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) decompose restriction --  (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) computing charpoly of 2 x 2 matrix using linbox\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) using linbox poly comp\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) computed poly -- now converting back to Sage\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) finished computing charpoly (time = 0.008001)\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) factoring the characteristic polynomial\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) done factoring (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) decomposition --  (time = 0.008001)\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) rational in-place Gauss elimination on 2 x 7 matrix\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) Finished. (time = 0.008001)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) \n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) rational in-place Gauss elimination on 4 x 7 matrix\n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) decompose restriction --  (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) computing charpoly of 4 x 4 matrix using linbox\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) using linbox poly comp\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) computed poly -- now converting back to Sage\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) finished computing charpoly (time = 0.004)\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) factoring the characteristic polynomial\n"}︡{"stdout":"verbose 2 (899: module.py, rational decomp) done factoring (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) decomposition --  (time = 0.004)\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) rational in-place Gauss elimination on 4 x 7 matrix\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (899: module.py, decomposition) Finished. (time = 0.012001)\n"}︡{"stdout":"[\nModular Symbols subspace of dimension 2 of Modular Symbols space of dimension 7 for Gamma_0(43) of weight 2 with sign 0 over Rational Field,\nModular Symbols subspace of dimension 4 of Modular Symbols space of dimension 7 for Gamma_0(43) of weight 2 with sign 0 over Rational Field\n]\n"}︡
︠2a1e481e-1cf9-49a7-b676-a7f652868ea1︠
set_verbose(1)
︡287f4a17-f282-4b4b-beb1-fa05776084ca︡
︠d004b96b-db99-4ea1-ab6f-5941da0ceb83︠
A = D[0]; A
︡0e7ec146-1707-4f07-b4a1-405a6d7dfa84︡{"stdout":"Modular Symbols subspace of dimension 2 of Modular Symbols space of dimension 7 for Gamma_0(43) of weight 2 with sign 0 over Rational Field\n"}︡
︠85b2a44b-48d1-4194-ae87-3b43de4285e6︠
phi = A.integral_period_mapping()
︡b1933444-8def-49dd-97b9-9fa96cb91ebf︡{"stdout":"verbose 1 (448: submodule.py, dual_free_module) computing dual"}︡{"stdout":"\n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) rational in-place Gauss elimination on 2 x 7 matrix\n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) computing left kernel for 7x7 matrix\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) computing a right kernel for 7x7 matrix over Rational Field\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) computing right kernel matrix over the rationals for 7x7 matrix\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) computing null space of 7 x 7 matrix using IML\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) finished computing null space (time = 0.004)\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) done computing right kernel matrix over the rationals for 7x7 matrix (time = 0.004)\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) rational in-place Gauss elimination on 4 x 7 matrix\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) done computing a right kernel for 7x7 matrix over Rational Field (time = 0.004)\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) done computing left kernel for 7x7 matrix (time = 0.004)\n"}︡{"stdout":"verbose 1 (3177: free_module.py, intersection) computing left kernel for 6x7 matrix\n"}︡{"stdout":"verbose 1 (3177: free_module.py, intersection) computing a right kernel for 7x6 matrix over Rational Field\n"}︡{"stdout":"verbose 1 (3177: free_module.py, intersection) computing right kernel matrix over the rationals for 7x6 matrix\n"}︡{"stdout":"verbose 1 (3177: free_module.py, intersection) computing null space of 7 x 6 matrix using IML\n"}︡{"stdout":"verbose 1 (3177: free_module.py, intersection) finished computing null space (time = 0.004001)\n"}︡{"stdout":"verbose 1 (3177: free_module.py, intersection) done computing right kernel matrix over the rationals for 7x6 matrix (time = 0.004001)\n"}︡{"stdout":"verbose 1 (3177: free_module.py, intersection) rational in-place Gauss elimination on 1 x 6 matrix\n"}︡{"stdout":"verbose 1 (3177: free_module.py, intersection) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (3177: free_module.py, intersection) done computing a right kernel for 7x6 matrix over Rational Field (time = 0.004001)\n"}︡{"stdout":"verbose 1 (3177: free_module.py, intersection) done computing left kernel for 6x7 matrix (time = 0.004001)\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) rational in-place Gauss elimination on 1 x 7 matrix\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (448: submodule.py, dual_free_module) computing dual\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) computing left kernel for 7x7 matrix\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) computing a right kernel for 7x7 matrix over Rational Field\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) computing right kernel matrix over the rationals for 7x7 matrix\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) computing null space of 7 x 7 matrix using IML\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) finished computing null space (time = 0.004)\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) done computing right kernel matrix over the rationals for 7x7 matrix (time = 0.004)\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) rational in-place Gauss elimination on 4 x 7 matrix\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) done computing a right kernel for 7x7 matrix over Rational Field (time = 0.004)\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) done computing left kernel for 7x7 matrix (time = 0.004)\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) computing left kernel for 7x7 matrix\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) computing a right kernel for 7x7 matrix over Rational Field\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) computing right kernel matrix over the rationals for 7x7 matrix\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) computing null space of 7 x 7 matrix using IML\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) finished computing null space (time = 0.004)\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) done computing right kernel matrix over the rationals for 7x7 matrix (time = 0.004)\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) rational in-place Gauss elimination on 4 x 7 matrix\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) done computing a right kernel for 7x7 matrix over Rational Field (time = 0.004)\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) done computing left kernel for 7x7 matrix (time = 0.004)\n"}︡{"stdout":"verbose 1 (500: ambient_module.py, hecke_bound) WARNING: ambient.py -- hecke_bound; returning unproven guess.\n"}︡{"stdout":"verbose 1 (448: submodule.py, dual_free_module) using T_2\n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) rational in-place Gauss elimination on 1 x 7 matrix\n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (256: hecke_operator.py, charpoly) computing charpoly of 1 x 1 matrix using linbox\n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) rational in-place Gauss elimination on 4 x 7 matrix\n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (448: submodule.py, dual_free_module) computing left kernel for 4x4 matrix\n"}︡{"stdout":"verbose 1 (448: submodule.py, dual_free_module) computing a right kernel for 4x4 matrix over Rational Field\n"}︡{"stdout":"verbose 1 (448: submodule.py, dual_free_module) computing right kernel matrix over the rationals for 4x4 matrix\n"}︡{"stdout":"verbose 1 (448: submodule.py, dual_free_module) computing null space of 4 x 4 matrix using IML\n"}︡{"stdout":"verbose 1 (448: submodule.py, dual_free_module) finished computing null space (time = 0.004)\n"}︡{"stdout":"verbose 1 (448: submodule.py, dual_free_module) done computing right kernel matrix over the rationals for 4x4 matrix (time = 0.004)\n"}︡{"stdout":"verbose 1 (448: submodule.py, dual_free_module) rational in-place Gauss elimination on 1 x 4 matrix\n"}︡{"stdout":"verbose 1 (448: submodule.py, dual_free_module) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (448: submodule.py, dual_free_module) done computing a right kernel for 4x4 matrix over Rational Field (time = 0.004)\n"}︡{"stdout":"verbose 1 (448: submodule.py, dual_free_module) done computing left kernel for 4x4 matrix (time = 0.004)\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) rational in-place Gauss elimination on 1 x 7 matrix\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) computing left kernel for 7x7 matrix\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) computing a right kernel for 7x7 matrix over Rational Field\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) computing right kernel matrix over the rationals for 7x7 matrix\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) computing null space of 7 x 7 matrix using IML\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) finished computing null space (time = 0.0)\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) done computing right kernel matrix over the rationals for 7x7 matrix (time = 0.0)\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) rational in-place Gauss elimination on 3 x 7 matrix\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) done computing a right kernel for 7x7 matrix over Rational Field (time = 0.004)\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) done computing left kernel for 7x7 matrix (time = 0.004)\n"}︡{"stdout":"verbose 1 (3177: free_module.py, intersection) computing left kernel for 5x7 matrix\n"}︡{"stdout":"verbose 1 (3177: free_module.py, intersection) computing a right kernel for 7x5 matrix over Rational Field\n"}︡{"stdout":"verbose 1 (3177: free_module.py, intersection) computing right kernel matrix over the rationals for 7x5 matrix\n"}︡{"stdout":"verbose 1 (3177: free_module.py, intersection) computing null space of 7 x 5 matrix using IML\n"}︡{"stdout":"verbose 1 (3177: free_module.py, intersection) finished computing null space (time = 0.004001)\n"}︡{"stdout":"verbose 1 (3177: free_module.py, intersection) done computing right kernel matrix over the rationals for 7x5 matrix (time = 0.004001)\n"}︡{"stdout":"verbose 1 (3177: free_module.py, intersection) rational in-place Gauss elimination on 1 x 5 matrix\n"}︡{"stdout":"verbose 1 (3177: free_module.py, intersection) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (3177: free_module.py, intersection) done computing a right kernel for 7x5 matrix over Rational Field (time = 0.004001)\n"}︡{"stdout":"verbose 1 (3177: free_module.py, intersection) done computing left kernel for 5x7 matrix (time = 0.004001)\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) rational in-place Gauss elimination on 1 x 7 matrix\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (448: submodule.py, dual_free_module) computing dual\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) computing left kernel for 7x7 matrix\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) computing a right kernel for 7x7 matrix over Rational Field\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) computing right kernel matrix over the rationals for 7x7 matrix\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) computing null space of 7 x 7 matrix using IML\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) finished computing null space (time = 0.004)\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) done computing right kernel matrix over the rationals for 7x7 matrix (time = 0.004)\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) rational in-place Gauss elimination on 3 x 7 matrix\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) done computing a right kernel for 7x7 matrix over Rational Field (time = 0.004)\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) done computing left kernel for 7x7 matrix (time = 0.004)\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) computing left kernel for 7x7 matrix\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) computing a right kernel for 7x7 matrix over Rational Field\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) computing right kernel matrix over the rationals for 7x7 matrix\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) computing null space of 7 x 7 matrix using IML\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) finished computing null space (time = 0.004)\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) done computing right kernel matrix over the rationals for 7x7 matrix (time = 0.004)\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) rational in-place Gauss elimination on 3 x 7 matrix\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) done computing a right kernel for 7x7 matrix over Rational Field (time = 0.008)\n"}︡{"stdout":"verbose 1 (1926: ambient.py, _compute_sign_submodule) done computing left kernel for 7x7 matrix (time = 0.008)\n"}︡{"stdout":"verbose 1 (500: ambient_module.py, hecke_bound) WARNING: ambient.py -- hecke_bound; returning unproven guess.\n"}︡{"stdout":"verbose 1 (448: submodule.py, dual_free_module) using T_2\n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) rational in-place Gauss elimination on 1 x 7 matrix\n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (256: hecke_operator.py, charpoly) computing charpoly of 1 x 1 matrix using linbox\n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) rational in-place Gauss elimination on 3 x 7 matrix\n"}︡{"stdout":"verbose 1 (3156: free_module.py, echelonized_basis_matrix) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (448: submodule.py, dual_free_module) computing left kernel for 3x3 matrix\n"}︡{"stdout":"verbose 1 (448: submodule.py, dual_free_module) computing a right kernel for 3x3 matrix over Rational Field\n"}︡{"stdout":"verbose 1 (448: submodule.py, dual_free_module) computing right kernel matrix over the rationals for 3x3 matrix\n"}︡{"stdout":"verbose 1 (448: submodule.py, dual_free_module) computing null space of 3 x 3 matrix using IML\n"}︡{"stdout":"verbose 1 (448: submodule.py, dual_free_module) finished computing null space (time = 0.004)\n"}︡{"stdout":"verbose 1 (448: submodule.py, dual_free_module) done computing right kernel matrix over the rationals for 3x3 matrix (time = 0.004)\n"}︡{"stdout":"verbose 1 (448: submodule.py, dual_free_module) rational in-place Gauss elimination on 1 x 3 matrix\n"}︡{"stdout":"verbose 1 (448: submodule.py, dual_free_module) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (448: submodule.py, dual_free_module) done computing a right kernel for 3x3 matrix over Rational Field (time = 0.004)\n"}︡{"stdout":"verbose 1 (448: submodule.py, dual_free_module) done computing left kernel for 3x3 matrix (time = 0.004)\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) rational in-place Gauss elimination on 1 x 7 matrix\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) done with gauss echelon form (time = 0.0)\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) rational in-place Gauss elimination on 2 x 7 matrix\n"}︡{"stdout":"verbose 1 (6272: free_module.py, _echelonized_basis) done with gauss echelon form (time = 0.0)\n"}︡
︠ae4e9a26-afb0-44e6-bef8-847fb415b4c1︠
phi(M([0,oo]))
︡ffa9fe42-e0d6-40e0-b0f2-fefc93a15261︡{"stdout":"(0, 0)\n"}︡
︠096b15ff-f4c8-46ba-9fdb-dc0fd91bdf83︠
infinity
︡bb0e5b6b-6119-4333-afde-c908d3c37399︡{"stdout":"+Infinity\n"}︡
︠693b7758-c95f-4d10-92fe-10251720fafd︠
oo
︡c126603e-4e34-4718-93e9-18c738923c39︡{"stdout":"+Infinity\n"}︡
︠45244b1f-ebd6-41a0-af80-d837734f9a66︠
show(oo)
︡bf2aa607-2ed4-49be-86eb-57b72746a62a︡{"tex":{"tex":"+\\infty","display":true}}︡
︠7d441aca-cf3f-4d0c-a7aa-c91941870321︠
oo.parent()
︡10f4b27f-0a55-446c-853b-42efccee29a8︡{"stdout":"The Infinity Ring\n"}︡
︠c78e73ed-8fce-49c6-b244-4d82bb32095b︠









