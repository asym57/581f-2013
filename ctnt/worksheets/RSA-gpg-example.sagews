︠69fabd3f-ec5c-4a9c-b4e4-af7c2698b367︠
#Sample key generated by gpg (smallest size available 1024bit)
'''
-----BEGIN PGP PRIVATE KEY BLOCK-----
Version: GnuPG v2.0.22 (MingW32)

lQHYBFJcjTEBBADVPVUyeY2OlxZO/lu0WlmxHqhDO0ANOzIGS9lN9d61a/bK9Y99
+fQrZ7ZdG0uxf7chbrOsU9wY57nChbx+YbKd7YIiNfk4D1EH0WnilXS1DNtjtC7b
87zeE+HwQZczC3GedrYo3+ojfXe7BfkwKDwsNAW55gWbngLBr6Tdvx9dtQARAQAB
AAP8D23eqkZNTdH01UZmUEhxUPWM60BwRATSe84lLRTrRmlHdCwMc+sQFcvtUBNX
iMJa99pQudlfhZXOxRp0JxjemZjgbqWoTcNn9jIsobrqL2VKFEmyVcuT6EDHpyQz
8mSSDvDfLvS0/laYpeotnW3lCD8Ejo+xXawVM+QCPPKaLwECANppdkjWwaGPePf9
Q97zZcBYDFhgEqBd3xOIwxxF2yEgy8uYxFsxTHIKt6237t8C3wQm8d5aw33viNEm
78XPDCECAPnv/frLr1hkghnySyrnHCYahh9PaF9DlJzNyiTTvZiqP+Ka+PwkG2mh
rOxPGLcdHQdyE7RRQyeV+hKG8pI/fxUCAICl7Qk7fLVM5A3vsju6vVhPYWjiVrMT
B+VVKWSNu8ZO/0MxlvadoQqlEncZI3lGQg32a+CVS7LO/IBuGSGUb8WgY7QvRXhh
bXBsZSAoZXhhbXBsZSBrZXkpIDxleGFtcGxlQGV4YW1wbGUuZXhhbXBsZT6IuQQT
AQIAIwUCUlyNMQIbAwcLCQgHAwIBBhUIAgkKCwQWAgMBAh4BAheAAAoJEDFAfSq/
68aBmVYEAMiwQCdk06ExMO8cBees0ORQT4yk7PRs9rN9m375QjZdDq/J0MdZbySC
j/Pf0YyDaW0kc1H9wC/lMzD8lIzf9LQ4ZW0QZ5MQ5vJZSrw1MFkYfu+EEZ8dxc5Z
rqpPneopLNB68j4zyLBxrNoWzhsQl/hK5BmCpD5qnzyt0Rrz6r/L
=QGSg
-----END PGP PRIVATE KEY BLOCK-----

'''
︠a888781f-e0fa-4975-9b96-6fd952969f3f︠
#Contains data:
#(see
# http://www.pgpdump.net/cgi-bin/pgpdump
#or
# https://github.com/toofishes/python-pgpdump/tree/master/pgpdump
#for how to get this)
'''
Old: Secret Key Packet(tag 5)(472 bytes)
	Ver 4 - new
	Public key creation time - Mon Oct 14 17:32:49 Pacific Daylight Time 2013
	Pub alg - RSA Encrypt or Sign(pub 1)
	RSA n(1024 bits) - d5 3d 55 32 79 8d 8e 97 16 4e fe 5b b4 5a 59 b1 1e a8 43 3b 40 0d 3b 32 06 4b d9 4d f5 de b5 6b f6 ca f5 8f 7d f9 f4 2b 67 b6 5d 1b 4b b1 7f b7 21 6e b3 ac 53 dc 18 e7 b9 c2 85 bc 7e 61 b2 9d ed 82 22 35 f9 38 0f 51 07 d1 69 e2 95 74 b5 0c db 63 b4 2e db f3 bc de 13 e1 f0 41 97 33 0b 71 9e 76 b6 28 df ea 23 7d 77 bb 05 f9 30 28 3c 2c 34 05 b9 e6 05 9b 9e 02 c1 af a4 dd bf 1f 5d b5
	RSA e(17 bits) - 01 00 01
	RSA d(1020 bits) - 0f 6d de aa 46 4d 4d d1 f4 d5 46 66 50 48 71 50 f5 8c eb 40 70 44 04 d2 7b ce 25 2d 14 eb 46 69 47 74 2c 0c 73 eb 10 15 cb ed 50 13 57 88 c2 5a f7 da 50 b9 d9 5f 85 95 ce c5 1a 74 27 18 de 99 98 e0 6e a5 a8 4d c3 67 f6 32 2c a1 ba ea 2f 65 4a 14 49 b2 55 cb 93 e8 40 c7 a7 24 33 f2 64 92 0e f0 df 2e f4 b4 fe 56 98 a5 ea 2d 9d 6d e5 08 3f 04 8e 8f b1 5d ac 15 33 e4 02 3c f2 9a 2f 01
	RSA p(512 bits) - da 69 76 48 d6 c1 a1 8f 78 f7 fd 43 de f3 65 c0 58 0c 58 60 12 a0 5d df 13 88 c3 1c 45 db 21 20 cb cb 98 c4 5b 31 4c 72 0a b7 ad b7 ee df 02 df 04 26 f1 de 5a c3 7d ef 88 d1 26 ef c5 cf 0c 21
	RSA q(512 bits) - f9 ef fd fa cb af 58 64 82 19 f2 4b 2a e7 1c 26 1a 86 1f 4f 68 5f 43 94 9c cd ca 24 d3 bd 98 aa 3f e2 9a f8 fc 24 1b 69 a1 ac ec 4f 18 b7 1d 1d 07 72 13 b4 51 43 27 95 fa 12 86 f2 92 3f 7f 15
	RSA u(512 bits) - 80 a5 ed 09 3b 7c b5 4c e4 0d ef b2 3b ba bd 58 4f 61 68 e2 56 b3 13 07 e5 55 29 64 8d bb c6 4e ff 43 31 96 f6 9d a1 0a a5 12 77 19 23 79 46 42 0d f6 6b e0 95 4b b2 ce fc 80 6e 19 21 94 6f c5
	Checksum - a0 63
Old: User ID Packet(tag 13)(47 bytes)
	User ID - Example (example key) <example@example.example>
Old: Signature Packet(tag 2)(185 bytes)
	Ver 4 - new
	Sig type - Positive certification of a User ID and Public Key packet(0x13).
	Pub alg - RSA Encrypt or Sign(pub 1)
	Hash alg - SHA1(hash 2)
	Hashed Sub: signature creation time(sub 2)(4 bytes)
		Time - Mon Oct 14 17:32:49 Pacific Daylight Time 2013
	Hashed Sub: key flags(sub 27)(1 bytes)
		Flag - This key may be used to certify other keys
		Flag - This key may be used to sign data
	Hashed Sub: preferred symmetric algorithms(sub 11)(6 bytes)
		Sym alg - AES with 256-bit key(sym 9)
		Sym alg - AES with 192-bit key(sym 8)
		Sym alg - AES with 128-bit key(sym 7)
		Sym alg - CAST5(sym 3)
		Sym alg - Triple-DES(sym 2)
		Sym alg - IDEA(sym 1)
	Hashed Sub: preferred hash algorithms(sub 21)(5 bytes)
		Hash alg - SHA256(hash 8)
		Hash alg - SHA1(hash 2)
		Hash alg - SHA384(hash 9)
		Hash alg - SHA512(hash 10)
		Hash alg - unknown(hash 11)
	Hashed Sub: preferred compression algorithms(sub 22)(3 bytes)
		Comp alg - ZLIB <RFC1950>(comp 2)
		Comp alg - BZip2(comp 3)
		Comp alg - ZIP <RFC1951>(comp 1)
	Hashed Sub: features(sub 30)(1 bytes)
		Flag - Modification detection (packets 18 and 19)
	Hashed Sub: key server preferences(sub 23)(1 bytes)
		Flag - No-modify
	Sub: issuer key ID(sub 16)(8 bytes)
		Key ID - 0x31407D2ABFEBC681
	Hash left 2 bytes - 99 56
	RSA m^d mod n(1024 bits) - c8 b0 40 27 64 d3 a1 31 30 ef 1c 05 e7 ac d0 e4 50 4f 8c a4 ec f4 6c f6 b3 7d 9b 7e f9 42 36 5d 0e af c9 d0 c7 59 6f 24 82 8f f3 df d1 8c 83 69 6d 24 73 51 fd c0 2f e5 33 30 fc 94 8c df f4 b4 38 65 6d 10 67 93 10 e6 f2 59 4a bc 35 30 59 18 7e ef 84 11 9f 1d c5 ce 59 ae aa 4f 9d ea 29 2c d0 7a f2 3e 33 c8 b0 71 ac da 16 ce 1b 10 97 f8 4a e4 19 82 a4 3e 6a 9f 3c ad d1 1a f3 ea bf cb
		-> PKCS-1
'''
︠821fad21-6b75-4daf-b156-3add4d04ce3d︠
#Convert to friendly integers:
n_str =  'd5 3d 55 32 79 8d 8e 97 16 4e fe 5b b4 5a 59 b1 1e a8 43 3b 40 0d 3b 32 06 4b d9 4d f5 de b5 6b f6 ca f5 8f 7d f9 f4 2b 67 b6 5d 1b 4b b1 7f b7 21 6e b3 ac 53 dc 18 e7 b9 c2 85 bc 7e 61 b2 9d ed 82 22 35 f9 38 0f 51 07 d1 69 e2 95 74 b5 0c db 63 b4 2e db f3 bc de 13 e1 f0 41 97 33 0b 71 9e 76 b6 28 df ea 23 7d 77 bb 05 f9 30 28 3c 2c 34 05 b9 e6 05 9b 9e 02 c1 af a4 dd bf 1f 5d b5'
e_str =  '01 00 01'
d_str = '0f 6d de aa 46 4d 4d d1 f4 d5 46 66 50 48 71 50 f5 8c eb 40 70 44 04 d2 7b ce 25 2d 14 eb 46 69 47 74 2c 0c 73 eb 10 15 cb ed 50 13 57 88 c2 5a f7 da 50 b9 d9 5f 85 95 ce c5 1a 74 27 18 de 99 98 e0 6e a5 a8 4d c3 67 f6 32 2c a1 ba ea 2f 65 4a 14 49 b2 55 cb 93 e8 40 c7 a7 24 33 f2 64 92 0e f0 df 2e f4 b4 fe 56 98 a5 ea 2d 9d 6d e5 08 3f 04 8e 8f b1 5d ac 15 33 e4 02 3c f2 9a 2f 01'
p_str =  'da 69 76 48 d6 c1 a1 8f 78 f7 fd 43 de f3 65 c0 58 0c 58 60 12 a0 5d df 13 88 c3 1c 45 db 21 20 cb cb 98 c4 5b 31 4c 72 0a b7 ad b7 ee df 02 df 04 26 f1 de 5a c3 7d ef 88 d1 26 ef c5 cf 0c 21'
q_str = 'f9 ef fd fa cb af 58 64 82 19 f2 4b 2a e7 1c 26 1a 86 1f 4f 68 5f 43 94 9c cd ca 24 d3 bd 98 aa 3f e2 9a f8 fc 24 1b 69 a1 ac ec 4f 18 b7 1d 1d 07 72 13 b4 51 43 27 95 fa 12 86 f2 92 3f 7f 15'
u_str = '80 a5 ed 09 3b 7c b5 4c e4 0d ef b2 3b ba bd 58 4f 61 68 e2 56 b3 13 07 e5 55 29 64 8d bb c6 4e ff 43 31 96 f6 9d a1 0a a5 12 77 19 23 79 46 42 0d f6 6b e0 95 4b b2 ce fc 80 6e 19 21 94 6f c5'
n = int('0x'+n_str.replace(' ',''),0);
e = int('0x'+e_str.replace(' ',''),0);
d = int('0x'+d_str.replace(' ',''),0);
p = int('0x'+p_str.replace(' ',''),0);
q = int('0x'+q_str.replace(' ',''),0);
u = int('0x'+u_str.replace(' ',''),0);
︡692e3aab-ebe1-4f68-9ddc-fad2dc3ed8dd︡
︠41d455cd-37fd-4a3f-b8a3-46962d93a8a1︠
#List out numbers
print('n = '+str(n))
print('e = '+str(e))
print('d = '+str(d))
print('p = '+str(p))
print('q = '+str(q))
print('u = '+str(u))
︠a92bebb9-22b1-4815-8be3-55e2d89ff3c8︠
#Test for correctness:
p in Primes() and q in Primes()
n == p*q
d*e%((p-1)*(q-1)) == 1
#u is the multiplicative inverse of p mod q
#See http://www.ietf.org/rfc/rfc4880.txt
#Subsection 5.5.3
#See http://www.emc.com/collateral/white-papers/h11300-pkcs-1v2-2-rsa-cryptography-standard-wp.pdf
#pg 12
p*u%q == 1
︡1e8ea069-4702-4bec-b322-6f943d414471︡{"stdout":"True"}︡{"stdout":"\n"}︡{"stdout":"True\n"}︡{"stdout":"True\n"}︡{"stdout":"True\n"}︡
︠cbe7c6ae-e97b-419e-a198-849c558df334︠
#Compare the two
#"plain" decryption
def decrypt(c):
        return pow(c,d,n)
#RSADP as described on PKCS1 v2.2
#http://www.emc.com/collateral/white-papers/h11300-pkcs-1v2-2-rsa-cryptography-standard-wp.pdf
#pg 12
#Define necessary global variables
dP = inverse_mod(e,p-1)
dQ = inverse_mod(e,q-1)
def RSADP_PKCSv2_2(c):
    m1 = int(pow(c,dP,p))
    m2 = int(pow(c,dQ,q))
    h = mod((m2 - m1)*u,q)
    return m1+p*h
︡6f29d112-e4ab-410d-95dc-591e3908b851︡
︠c58ce4d9-8599-439b-b8e5-394476c140fe︠
#To see both work:
m = 17
c = pow(m,e,n)
decrypt(c) == 17
RSADP_PKCSv2_2(c) == 17
︡a5ae597d-66a4-46bb-9c8c-5892ea31c5ab︡{"stdout":"True\n"}︡{"stdout":"True\n"}︡
︠16c70948-259f-4d50-82a0-1aa609b93d33︠
#Testing zone:
import random
C = [int(n*random.random()) for i in xrange(100)]
timeit('for c in C: decrypt(c)')
timeit('for c in C: RSADP_PKCSv2_2(c)')
︡3b6067b2-6787-4a0e-a9d6-a185c3a3dfa7︡{"stdout":"5 loops, best of 3: 732 ms per loop"}︡{"stdout":"\n"}︡{"stdout":"5 loops, best of 3: 59 ms per loop"}︡{"stdout":"\n"}︡
︠8fd11ebe-1ddf-4eaf-ba74-6a66a642205f︠
(732/59).numerical_approx()
︡35a787c2-2183-4c8e-bf91-c1a48f341446︡{"stdout":"12.4067796610169\n"}︡
︠89f2d3a3-11a9-4855-889f-c6b9f69184b5︠









