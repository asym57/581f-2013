︠f143c344-9032-45b2-8c7d-618dab8ad4af︠
%cython
#clib flint

from libc.stdint cimport uint32_t, uint64_t
from libc.stdlib cimport strtoll, strtod, qsort
from libc.string cimport strchr, memcpy
from libc.stdio cimport FILE, fopen, fclose
from sage.symbolic.expression import Expression
from sage.symbolic.ring import SR

logx = SR('log(x)')

import numpy
cimport numpy

import subprocess

cdef extern from "stdio.h":
    ssize_t getline(char **, size_t *, FILE *)

cdef int uint64_cmp(const void *a, const void* b) nogil:
    if (<uint64_t *>a)[0] < (<uint64_t *>b)[0]:
        return -1
    elif (<uint64_t *>a)[0] > (<uint64_t *>b)[0]:
        return 1
    return 0

cdef class TriplesPlotter(object):

    cdef uint32_t *perm
    cdef uint64_t *c
    cdef double *q
    cdef uint32_t size

    def __cinit__(self, filename):
        p = subprocess.Popen(
                             ['wc', '-l', filename],
                             stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE)
        p.wait()
        result, err = p.communicate()
        if p.returncode:
            raise IOError(err)
        self.size = int(result.strip().split()[0])
        self.c = <uint64_t *>sage_malloc(sizeof(uint64_t)*self.size)
        self.q = <double *>sage_malloc(sizeof(double)*self.size)
        self.perm = <uint32_t *>sage_malloc(sizeof(uint32_t)*self.size)

    def __dealloc__(self):
        sage_free(self.c)
        sage_free(self.q)
        sage_free(self.perm)

    def __init__(self, filename):
        # big file
        # much faster to use stdio directly instead of
        # python's wrappers
        t = filename.encode("UTF-8")
        cdef char *fname = t

        cdef FILE *file
        file = fopen(fname, "rb")
        if file == NULL:
            raise IOError(2, "No such file or directory: '%s'" % filename)

        cdef char *line = NULL
        cdef size_t l = 0
        cdef ssize_t read
        cdef char *space
        cdef uint32_t i = 0ul

        while True:

            read = getline(&line, &l, file)
            if read == -1:
                break

            space = strchr(line, ' ') # a
            space = strchr(space+1, ' ') # b
            self.c[i] = strtoll(space, &space, 10)
            space = strchr(space+1, ' ') # rad
            self.q[i] = strtod(space, &space)

            i += 1ul

        fclose(file)

    def __getitem__(self, x):
        return self.c[x], self.q[x]

    cdef _bisect(self, double q):
        cdef uint32_t left, right, middle
        left, right = 0ul, self.size-1ul
        while left < right:
            middle = (left + right)/2ul
            if q < self.q[middle]:
                right = middle
            else:
                left = middle + 1ul
        return middle

    cdef _count(self, double q):
        if q < self[0][1]:
            return self.size
        elif q >= self[self.size-1ul][1]:
            return 0
        return self.size-self._bisect(q)

    def count(self, double q):
        return self._count(q)

    def __len__(self):
        return self.size

    cdef void _sorted_c(self, uint64_t *array, uint32_t count):
        memcpy(array, self.c+(self.size-count), count*sizeof(uint64_t))
        qsort(array, count, sizeof(uint64_t), &uint64_cmp)

    def plot(self, double q, func=logx, vertical_lines=True, **kwds):
        if not isinstance(func, Expression):
            raise ValueError("func must be an Expression")
        cdef uint32_t count, i
        count = self._count(q)

        cdef uint64_t *sorted_c = <uint64_t *>sage_malloc(count*sizeof(uint64_t))
        self._sorted_c(sorted_c, count)

        func = func._fast_float_(*func.arguments())
        cdef uint64_t interval
        tuples = []
        if count > 10000: # don't ever plot more than 20000 points
            interval = count/10000
        else:
            interval = 1

        for i in range(count):
            if not i%interval:
                tuples.append((func(sorted_c[i]), i+1))

        sage_free(sorted_c)

        from sage.plot.step import plot_step_function
        return plot_step_function(tuples, vertical_lines=vertical_lines, **kwds)

    def best_fit(self, double q, func=logx, *args, **kwds):
        if not isinstance(func, Expression):
            raise ValueError("func must be an Expression")
        cdef uint32_t count = self._count(q)
        cdef uint64_t *sorted_c = <uint64_t *>sage_malloc(count*sizeof(uint64_t))
        self._sorted_c(sorted_c, count)

        func = func._fast_float_(*func.arguments())
        cdef uint6

        cdef uint32_t i, j, interval, size
        if count > 12500: # don't ever interpolate with more than 25000 points
            interval = count/12500
            size = (count+interval-1)/interval
        else:
            interval = 1
            size = count
        cdef numpy.ndarray data = numpy.zeros([size, 2])
        j = 0ul
        for i in range(count):
            if not i%interval:
                data[j, 0] = func(sorted_c[i])
                data[j, 1] = i+1ul
                j += 1ul

        sage_free(sorted_c)
        from sage.numerical.optimize import find_fit
        return find_fit(data, *args, **kwds)




︡7a601235-8adc-40b5-a6f4-d1585b972456︡{"once":false,"file":{"show":false,"uuid":"4ce7a24f-9011-4b0e-bfc5-9ab074c77634","filename":"/mnt/home/uHNlUmEE/.sage/temp/compute1a/21242/spyx/_mnt_home_uHNlUmEE__sage_temp_compute1a_21242_dir_rnSIvK_a_pyx/_mnt_home_uHNlUmEE__sage_temp_compute1a_21242_dir_rnSIvK_a_pyx_0.html"}}︡{"html":"<a href='/blobs//mnt/home/uHNlUmEE/.sage/temp/compute1a/21242/spyx/_mnt_home_uHNlUmEE__sage_temp_compute1a_21242_dir_rnSIvK_a_pyx/_mnt_home_uHNlUmEE__sage_temp_compute1a_21242_dir_rnSIvK_a_pyx_0.html?uuid=4ce7a24f-9011-4b0e-bfc5-9ab074c77634' target='_new' class='btn btn-small '>Show auto-generated code &nbsp;<i class='icon-external-link'></i></a>"}︡
︠44773f11-6f7b-42e0-aa95-2c7775a4933b︠
%time tp =TriplesPlotter("data_sorted")
︡70693bef-dae2-4c92-91aa-84ab39f600da︡{"stdout":"CPU time: 28.20 s, Wall time: 8.58 s"}︡{"stdout":"\n"}︡
︠95d16c24-8669-4066-8aa7-34fd27c21490︠
var('a,b')
@parallel
def multi_fitter(*args, **kwds):
    kwds['initial_guess'] = [y.right() for y in tp.best_fit(*args, **kwds)]
    return tuple(y.right() for y in tp.best_fit(*args, **kwds))
︡77a5a2e6-5731-4616-9125-538794008188︡{"stdout":"(a, b)\n"}︡
︠b499d90c-2d29-45dd-b794-615e1b068c22︠
%time tp.best_fit(1.4, model=x^b/a, parameters=[a,b], initial_guess=[100, 5], variables=[x])
︡ab40f39f-0dfd-4dc7-b94b-bffdaf773fd7︡{"stdout":"[a == 14.134409523669214, b == 2.078935525972992]\n"}︡{"stdout":"CPU time: 0.06 s, Wall time: 0.06 s\n"}︡
︠30d757f3-3e05-4fe9-8c7f-573633466181︠


%time  multi_fitter(1., model=x^b/a, parameters=[a,b], variables=[x])
︡5a5befad-1dac-4e6f-ae1a-5aa2f369dcd0︡
︠eaa2a13b-a993-4a20-86dc-e1e4207e438fr︠
#f = open('fitting_data', 'w')
thing = multi_fitter([{'q':q, 'model':x^b/a, 'variables':[x], 'parameters':[a,b], 'initial_guess':[100, 5]} for q in srange(1, 1.4, 0.0004)])

data = [y[1] for y in thing]

f = open('fitting_data', 'w')
for s in data:
    f.write(' '.join(s) + '\n')

f.close()
︡6b08f5e6-3296-43b5-81a1-f7089ef971a2︡
︠61366703-7a98-4b0a-be4c-25646b086b20︠
list(multi_fitter([{'q':q, 'model':x^b/a, 'variables':[x], 'parameters':[a,b]} for q in (1.3,1.4)]))
︡702a6c33-90f7-4669-900a-a29be6277363︡{"stderr":"Error in lines 1-1\nTraceback (most recent call last):\n  File \"/mnt/home/uHNlUmEE/.sagemathcloud/sage_server.py\", line 633, in execute\n    exec compile(block+'\\n', '', 'single') in namespace, locals\n  File \"\", line 1, in <module>\n  File \"\", line 2, in multi_fitter\n  File \"_mnt_home_uHNlUmEE__sage_temp_compute1a_20000_dir_8eevFw_a_pyx_0.pyx\", line 149, in _mnt_home_uHNlUmEE__sage_temp_compute1a_20000_dir_8eevFw_a_pyx_0.TriplesPlotter.best_fit (_mnt_home_uHNlUmEE__sage_temp_compute1a_20000_dir_8eevFw_a_pyx_0.c:2993)\nTypeError: a float is required\n"}︡
︠976d2b31-ee2b-4c3e-a616-9f40a2d39a55︠
s.parallel?
︡e234550d-61b9-4bd6-86f3-0ef36844cb29︡{"stdout":"   File: /mnt/home/uHNlUmEE/sage-5.12.rc0/local/lib/python2.7/site-packages/sage/parallel/decorate.py\n   Docstring:\n      Create a \"parallel\"-decorated function. This is the object created\n   by \"parallel()\".\n\n"}︡
︠ded27790-a5e0-4f51-b18e-6b31cca73d79︠
.4/1000
︡8093f334-42cc-4e5e-838e-4e5ae14667e4︡{"stdout":"0.000400000000000000\n"}︡
︠19e69fa0-f394-4a3f-af3e-01a5f55fbbae︠
srange(1, 1.4, .0004)
︡55e4567d-641a-46d4-b114-3d6d8f03222f︡{"stdout":"[1.00000000000000, 1.00040000000000, 1.00080000000000, 1.00120000000000, 1.00160000000000, 1.00200000000000, 1.00240000000000, 1.00280000000000, 1.00320000000000, 1.00360000000000, 1.00400000000000, 1.00440000000000, 1.00480000000000, 1.00520000000000, 1.00560000000000, 1.00600000000000, 1.00640000000000, 1.00680000000000, 1.00720000000000, 1.00760000000000, 1.00800000000000, 1.00840000000000, 1.00880000000000, 1.00920000000000, 1.00960000000000, 1.01000000000000, 1.01040000000000, 1.01080000000000, 1.01120000000000, 1.01160000000000, 1.01200000000000, 1.01240000000000, 1.01280000000000, 1.01320000000000, 1.01360000000000, 1.01400000000000, 1.01440000000000, 1.01480000000000, 1.01520000000000, 1.01560000000000, 1.01600000000000, 1.01640000000000, 1.01680000000000, 1.01720000000000, 1.01760000000000, 1.01800000000000, 1.01840000000000, 1.01880000000000, 1.01920000000000, 1.01960000000000, 1.02000000000000, 1.02040000000000, 1.02080000000000, 1.02120000000000, 1.02160000000000, 1.02200000000000, 1.02240000000000, 1.02280000000000, 1.02320000000000, 1.02360000000000, 1.02400000000000, 1.02440000000000, 1.02480000000000, 1.02520000000000, 1.02560000000000, 1.02600000000000, 1.02640000000000, 1.02680000000000, 1.02720000000000, 1.02760000000000, 1.02800000000000, 1.02840000000000, 1.02880000000000, 1.02920000000000, 1.02960000000000, 1.03000000000000, 1.03040000000000, 1.03080000000000, 1.03120000000000, 1.03160000000000, 1.03200000000000, 1.03240000000000, 1.03280000000000, 1.03320000000000, 1.03360000000000, 1.03400000000000, 1.03440000000000, 1.03480000000000, 1.03520000000000, 1.03560000000000, 1.03600000000000, 1.03640000000000, 1.03680000000000, 1.03720000000000, 1.03760000000000, 1.03800000000000, 1.03840000000000, 1.03880000000000, 1.03920000000000, 1.03960000000000, 1.04000000000000, 1.04040000000000, 1.04080000000000, 1.04120000000000, 1.04160000000000, 1.04200000000000, 1.04240000000000, 1.04280000000000, 1.04320000000000, 1.04360000000000, 1.04400000000000, 1.04440000000000, 1.04480000000000, 1.04520000000000, 1.04559999999999, 1.04599999999999, 1.04639999999999, 1.04679999999999, 1.04719999999999, 1.04759999999999, 1.04799999999999, 1.04839999999999, 1.04879999999999, 1.04919999999999, 1.04959999999999, 1.04999999999999, 1.05039999999999, 1.05079999999999, 1.05119999999999, 1.05159999999999, 1.05199999999999, 1.05239999999999, 1.05279999999999, 1.05319999999999, 1.05359999999999, 1.05399999999999, 1.05439999999999, 1.05479999999999, 1.05519999999999, 1.05559999999999, 1.05599999999999, 1.05639999999999, 1.05679999999999, 1.05719999999999, 1.05759999999999, 1.05799999999999, 1.05839999999999, 1.05879999999999, 1.05919999999999, 1.05959999999999, 1.05999999999999, 1.06039999999999, 1.06079999999999, 1.06119999999999, 1.06159999999999, 1.06199999999999, 1.06239999999999, 1.06279999999999, 1.06319999999999, 1.06359999999999, 1.06399999999999, 1.06439999999999, 1.06479999999999, 1.06519999999999, 1.06559999999999, 1.06599999999999, 1.06639999999999, 1.06679999999999, 1.06719999999999, 1.06759999999999, 1.06799999999999, 1.06839999999999, 1.06879999999999, 1.06919999999999, 1.06959999999999, 1.06999999999999, 1.07039999999999, 1.07079999999999, 1.07119999999999, 1.07159999999999, 1.07199999999999, 1.07239999999999, 1.07279999999999, 1.07319999999999, 1.07359999999999, 1.07399999999999, 1.07439999999999, 1.07479999999999, 1.07519999999999, 1.07559999999999, 1.07599999999999, 1.07639999999999, 1.07679999999999, 1.07719999999999, 1.07759999999999, 1.07799999999999, 1.07839999999999, 1.07879999999999, 1.07919999999999, 1.07959999999999, 1.07999999999999, 1.08039999999999, 1.08079999999999, 1.08119999999999, 1.08159999999999, 1.08199999999999, 1.08239999999999, 1.08279999999999, 1.08319999999999, 1.08359999999999, 1.08399999999999, 1.08439999999999, 1.08479999999999, 1.08519999999999, 1.08559999999999, 1.08599999999999, 1.08639999999999, 1.08679999999999, 1.08719999999999, 1.08759999999999, 1.08799999999999, 1.08839999999999, 1.08879999999999, 1.08919999999999, 1.08959999999999, 1.08999999999999, 1.09039999999999, 1.09079999999999, 1.09119999999999, 1.09159999999999, 1.09199999999999, 1.09239999999999, 1.09279999999999, 1.09319999999999, 1.09359999999999, 1.09399999999999, 1.09439999999999, 1.09479999999999, 1.09519999999999, 1.09559999999999, 1.09599999999999, 1.09639999999999, 1.09679999999999, 1.09719999999999, 1.09759999999999, 1.09799999999999, 1.09839999999999, 1.09879999999999, 1.09919999999999, 1.09959999999999, 1.09999999999999, 1.10039999999999, 1.10079999999999, 1.10119999999999, 1.10159999999999, 1.10199999999999, 1.10239999999999, 1.10279999999999, 1.10319999999999, 1.10359999999999, 1.10399999999999, 1.10439999999999, 1.10479999999999, 1.10519999999999, 1.10559999999999, 1.10599999999999, 1.10639999999999, 1.10679999999999, 1.10719999999999, 1.10759999999999, 1.10799999999999, 1.10839999999999, 1.10879999999999, 1.10919999999999, 1.10959999999999, 1.10999999999999, 1.11039999999999, 1.11079999999999, 1.11119999999999, 1.11159999999999, 1.11199999999999, 1.11239999999999, 1.11279999999999, 1.11319999999999, 1.11359999999999, 1.11399999999999, 1.11439999999999, 1.11479999999999, 1.11519999999999, 1.11559999999999, 1.11599999999999, 1.11639999999999, 1.11679999999999, 1.11719999999999, 1.11759999999999, 1.11799999999999, 1.11839999999999, 1.11879999999999, 1.11919999999999, 1.11959999999999, 1.11999999999999, 1.12039999999999, 1.12079999999999, 1.12119999999999, 1.12159999999999, 1.12199999999999, 1.12239999999999, 1.12279999999999, 1.12319999999999, 1.12359999999999, 1.12399999999999, 1.12439999999999, 1.12479999999999, 1.12519999999999, 1.12559999999999, 1.12599999999999, 1.12639999999999, 1.12679999999999, 1.12719999999999, 1.12759999999999, 1.12799999999999, 1.12839999999999, 1.12879999999999, 1.12919999999999, 1.12959999999999, 1.12999999999999, 1.13039999999999, 1.13079999999999, 1.13119999999999, 1.13159999999999, 1.13199999999999, 1.13239999999999, 1.13279999999999, 1.13319999999999, 1.13359999999999, 1.13399999999999, 1.13439999999999, 1.13479999999999, 1.13519999999999, 1.13559999999999, 1.13599999999999, 1.13639999999998, 1.13679999999998, 1.13719999999998, 1.13759999999998, 1.13799999999998, 1.13839999999998, 1.13879999999998, 1.13919999999998, 1.13959999999998, 1.13999999999998, 1.14039999999998, 1.14079999999998, 1.14119999999998, 1.14159999999998, 1.14199999999998, 1.14239999999998, 1.14279999999998, 1.14319999999998, 1.14359999999998, 1.14399999999998, 1.14439999999998, 1.14479999999998, 1.14519999999998, 1.14559999999998, 1.14599999999998, 1.14639999999998, 1.14679999999998, 1.14719999999998, 1.14759999999998, 1.14799999999998, 1.14839999999998, 1.14879999999998, 1.14919999999998, 1.14959999999998, 1.14999999999998, 1.15039999999998, 1.15079999999998, 1.15119999999998, 1.15159999999998, 1.15199999999998, 1.15239999999998, 1.15279999999998, 1.15319999999998, 1.15359999999998, 1.15399999999998, 1.15439999999998, 1.15479999999998, 1.15519999999998, 1.15559999999998, 1.15599999999998, 1.15639999999998, 1.15679999999998, 1.15719999999998, 1.15759999999998, 1.15799999999998, 1.15839999999998, 1.15879999999998, 1.15919999999998, 1.15959999999998, 1.15999999999998, 1.16039999999998, 1.16079999999998, 1.16119999999998, 1.16159999999998, 1.16199999999998, 1.16239999999998, 1.16279999999998, 1.16319999999998, 1.16359999999998, 1.16399999999998, 1.16439999999998, 1.16479999999998, 1.16519999999998, 1.16559999999998, 1.16599999999998, 1.16639999999998, 1.16679999999998, 1.16719999999998, 1.16759999999998, 1.16799999999998, 1.16839999999998, 1.16879999999998, 1.16919999999998, 1.16959999999998, 1.16999999999998, 1.17039999999998, 1.17079999999998, 1.17119999999998, 1.17159999999998, 1.17199999999998, 1.17239999999998, 1.17279999999998, 1.17319999999998, 1.17359999999998, 1.17399999999998, 1.17439999999998, 1.17479999999998, 1.17519999999998, 1.17559999999998, 1.17599999999998, 1.17639999999998, 1.17679999999998, 1.17719999999998, 1.17759999999998, 1.17799999999998, 1.17839999999998, 1.17879999999998, 1.17919999999998, 1.17959999999998, 1.17999999999998, 1.18039999999998, 1.18079999999998, 1.18119999999998, 1.18159999999998, 1.18199999999998, 1.18239999999998, 1.18279999999998, 1.18319999999998, 1.18359999999998, 1.18399999999998, 1.18439999999998, 1.18479999999998, 1.18519999999998, 1.18559999999998, 1.18599999999998, 1.18639999999998, 1.18679999999998, 1.18719999999998, 1.18759999999998, 1.18799999999998, 1.18839999999998, 1.18879999999998, 1.18919999999998, 1.18959999999998, 1.18999999999998, 1.19039999999998, 1.19079999999998, 1.19119999999998, 1.19159999999998, 1.19199999999998, 1.19239999999998, 1.19279999999998, 1.19319999999998, 1.19359999999998, 1.19399999999998, 1.19439999999998, 1.19479999999998, 1.19519999999998, 1.19559999999998, 1.19599999999998, 1.19639999999998, 1.19679999999998, 1.19719999999998, 1.19759999999998, 1.19799999999998, 1.19839999999998, 1.19879999999998, 1.19919999999998, 1.19959999999998, 1.19999999999998, 1.20039999999998, 1.20079999999998, 1.20119999999998, 1.20159999999998, 1.20199999999998, 1.20239999999998, 1.20279999999998, 1.20319999999998, 1.20359999999998, 1.20399999999998, 1.20439999999998, 1.20479999999998, 1.20519999999998, 1.20559999999998, 1.20599999999998, 1.20639999999998, 1.20679999999998, 1.20719999999998, 1.20759999999998, 1.20799999999998, 1.20839999999998, 1.20879999999998, 1.20919999999998, 1.20959999999998, 1.20999999999998, 1.21039999999998, 1.21079999999998, 1.21119999999998, 1.21159999999998, 1.21199999999998, 1.21239999999998, 1.21279999999998, 1.21319999999998, 1.21359999999998, 1.21399999999998, 1.21439999999998, 1.21479999999998, 1.21519999999998, 1.21559999999998, 1.21599999999998, 1.21639999999998, 1.21679999999998, 1.21719999999998, 1.21759999999998, 1.21799999999998, 1.21839999999998, 1.21879999999998, 1.21919999999998, 1.21959999999998, 1.21999999999998, 1.22039999999998, 1.22079999999998, 1.22119999999998, 1.22159999999998, 1.22199999999998, 1.22239999999998, 1.22279999999998, 1.22319999999998, 1.22359999999998, 1.22399999999998, 1.22439999999998, 1.22479999999998, 1.22519999999998, 1.22559999999998, 1.22599999999998, 1.22639999999998, 1.22679999999998, 1.22719999999997, 1.22759999999997, 1.22799999999997, 1.22839999999997, 1.22879999999997, 1.22919999999997, 1.22959999999997, 1.22999999999997, 1.23039999999997, 1.23079999999997, 1.23119999999997, 1.23159999999997, 1.23199999999997, 1.23239999999997, 1.23279999999997, 1.23319999999997, 1.23359999999997, 1.23399999999997, 1.23439999999997, 1.23479999999997, 1.23519999999997, 1.23559999999997, 1.23599999999997, 1.23639999999997, 1.23679999999997, 1.23719999999997, 1.23759999999997, 1.23799999999997, 1.23839999999997, 1.23879999999997, 1.23919999999997, 1.23959999999997, 1.23999999999997, 1.24039999999997, 1.24079999999997, 1.24119999999997, 1.24159999999997, 1.24199999999997, 1.24239999999997, 1.24279999999997, 1.24319999999997, 1.24359999999997, 1.24399999999997, 1.24439999999997, 1.24479999999997, 1.24519999999997, 1.24559999999997, 1.24599999999997, 1.24639999999997, 1.24679999999997, 1.24719999999997, 1.24759999999997, 1.24799999999997, 1.24839999999997, 1.24879999999997, 1.24919999999997, 1.24959999999997, 1.24999999999997, 1.25039999999997, 1.25079999999997, 1.25119999999997, 1.25159999999997, 1.25199999999997, 1.25239999999997, 1.25279999999997, 1.25319999999997, 1.25359999999997, 1.25399999999997, 1.25439999999997, 1.25479999999997, 1.25519999999997, 1.25559999999997, 1.25599999999997, 1.25639999999997, 1.25679999999997, 1.25719999999997, 1.25759999999997, 1.25799999999997, 1.25839999999997, 1.25879999999997, 1.25919999999997, 1.25959999999997, 1.25999999999997, 1.26039999999997, 1.26079999999997, 1.26119999999997, 1.26159999999997, 1.26199999999997, 1.26239999999997, 1.26279999999997, 1.26319999999997, 1.26359999999997, 1.26399999999997, 1.26439999999997, 1.26479999999997, 1.26519999999997, 1.26559999999997, 1.26599999999997, 1.26639999999997, 1.26679999999997, 1.26719999999997, 1.26759999999997, 1.26799999999997, 1.26839999999997, 1.26879999999997, 1.26919999999997, 1.26959999999997, 1.26999999999997, 1.27039999999997, 1.27079999999997, 1.27119999999997, 1.27159999999997, 1.27199999999997, 1.27239999999997, 1.27279999999997, 1.27319999999997, 1.27359999999997, 1.27399999999997, 1.27439999999997, 1.27479999999997, 1.27519999999997, 1.27559999999997, 1.27599999999997, 1.27639999999997, 1.27679999999997, 1.27719999999997, 1.27759999999997, 1.27799999999997, 1.27839999999997, 1.27879999999997, 1.27919999999997, 1.27959999999997, 1.27999999999997, 1.28039999999997, 1.28079999999997, 1.28119999999997, 1.28159999999997, 1.28199999999997, 1.28239999999997, 1.28279999999997, 1.28319999999997, 1.28359999999997, 1.28399999999997, 1.28439999999997, 1.28479999999997, 1.28519999999997, 1.28559999999997, 1.28599999999997, 1.28639999999997, 1.28679999999997, 1.28719999999997, 1.28759999999997, 1.28799999999997, 1.28839999999997, 1.28879999999997, 1.28919999999997, 1.28959999999997, 1.28999999999997, 1.29039999999997, 1.29079999999997, 1.29119999999997, 1.29159999999997, 1.29199999999997, 1.29239999999997, 1.29279999999997, 1.29319999999997, 1.29359999999997, 1.29399999999997, 1.29439999999997, 1.29479999999997, 1.29519999999997, 1.29559999999997, 1.29599999999997, 1.29639999999997, 1.29679999999997, 1.29719999999997, 1.29759999999997, 1.29799999999997, 1.29839999999997, 1.29879999999997, 1.29919999999997, 1.29959999999997, 1.29999999999997, 1.30039999999997, 1.30079999999997, 1.30119999999997, 1.30159999999997, 1.30199999999997, 1.30239999999997, 1.30279999999997, 1.30319999999997, 1.30359999999997, 1.30399999999997, 1.30439999999997, 1.30479999999997, 1.30519999999997, 1.30559999999997, 1.30599999999997, 1.30639999999997, 1.30679999999997, 1.30719999999997, 1.30759999999997, 1.30799999999997, 1.30839999999997, 1.30879999999997, 1.30919999999997, 1.30959999999997, 1.30999999999997, 1.31039999999997, 1.31079999999997, 1.31119999999997, 1.31159999999997, 1.31199999999997, 1.31239999999997, 1.31279999999997, 1.31319999999997, 1.31359999999997, 1.31399999999997, 1.31439999999997, 1.31479999999997, 1.31519999999997, 1.31559999999997, 1.31599999999997, 1.31639999999997, 1.31679999999997, 1.31719999999997, 1.31759999999997, 1.31799999999996, 1.31839999999996, 1.31879999999996, 1.31919999999996, 1.31959999999996, 1.31999999999996, 1.32039999999996, 1.32079999999996, 1.32119999999996, 1.32159999999996, 1.32199999999996, 1.32239999999996, 1.32279999999996, 1.32319999999996, 1.32359999999996, 1.32399999999996, 1.32439999999996, 1.32479999999996, 1.32519999999996, 1.32559999999996, 1.32599999999996, 1.32639999999996, 1.32679999999996, 1.32719999999996, 1.32759999999996, 1.32799999999996, 1.32839999999996, 1.32879999999996, 1.32919999999996, 1.32959999999996, 1.32999999999996, 1.33039999999996, 1.33079999999996, 1.33119999999996, 1.33159999999996, 1.33199999999996, 1.33239999999996, 1.33279999999996, 1.33319999999996, 1.33359999999996, 1.33399999999996, 1.33439999999996, 1.33479999999996, 1.33519999999996, 1.33559999999996, 1.33599999999996, 1.33639999999996, 1.33679999999996, 1.33719999999996, 1.33759999999996, 1.33799999999996, 1.33839999999996, 1.33879999999996, 1.33919999999996, 1.33959999999996, 1.33999999999996, 1.34039999999996, 1.34079999999996, 1.34119999999996, 1.34159999999996, 1.34199999999996, 1.34239999999996, 1.34279999999996, 1.34319999999996, 1.34359999999996, 1.34399999999996, 1.34439999999996, 1.34479999999996, 1.34519999999996, 1.34559999999996, 1.34599999999996, 1.34639999999996, 1.34679999999996, 1.34719999999996, 1.34759999999996, 1.34799999999996, 1.34839999999996, 1.34879999999996, 1.34919999999996, 1.34959999999996, 1.34999999999996, 1.35039999999996, 1.35079999999996, 1.35119999999996, 1.35159999999996, 1.35199999999996, 1.35239999999996, 1.35279999999996, 1.35319999999996, 1.35359999999996, 1.35399999999996, 1.35439999999996, 1.35479999999996, 1.35519999999996, 1.35559999999996, 1.35599999999996, 1.35639999999996, 1.35679999999996, 1.35719999999996, 1.35759999999996, 1.35799999999996, 1.35839999999996, 1.35879999999996, 1.35919999999996, 1.35959999999996, 1.35999999999996, 1.36039999999996, 1.36079999999996, 1.36119999999996, 1.36159999999996, 1.36199999999996, 1.36239999999996, 1.36279999999996, 1.36319999999996, 1.36359999999996, 1.36399999999996, 1.36439999999996, 1.36479999999996, 1.36519999999996, 1.36559999999996, 1.36599999999996, 1.36639999999996, 1.36679999999996, 1.36719999999996, 1.36759999999996, 1.36799999999996, 1.36839999999996, 1.36879999999996, 1.36919999999996, 1.36959999999996, 1.36999999999996, 1.37039999999996, 1.37079999999996, 1.37119999999996, 1.37159999999996, 1.37199999999996, 1.37239999999996, 1.37279999999996, 1.37319999999996, 1.37359999999996, 1.37399999999996, 1.37439999999996, 1.37479999999996, 1.37519999999996, 1.37559999999996, 1.37599999999996, 1.37639999999996, 1.37679999999996, 1.37719999999996, 1.37759999999996, 1.37799999999996, 1.37839999999996, 1.37879999999996, 1.37919999999996, 1.37959999999996, 1.37999999999996, 1.38039999999996, 1.38079999999996, 1.38119999999996, 1.38159999999996, 1.38199999999996, 1.38239999999996, 1.38279999999996, 1.38319999999996, 1.38359999999996, 1.38399999999996, 1.38439999999996, 1.38479999999996, 1.38519999999996, 1.38559999999996, 1.38599999999996, 1.38639999999996, 1.38679999999996, 1.38719999999996, 1.38759999999996, 1.38799999999996, 1.38839999999996, 1.38879999999996, 1.38919999999996, 1.38959999999996, 1.38999999999996, 1.39039999999996, 1.39079999999996, 1.39119999999996, 1.39159999999996, 1.39199999999996, 1.39239999999996, 1.39279999999996, 1.39319999999996, 1.39359999999996, 1.39399999999996, 1.39439999999996, 1.39479999999996, 1.39519999999996, 1.39559999999996, 1.39599999999996, 1.39639999999996, 1.39679999999996, 1.39719999999996, 1.39759999999996, 1.39799999999996, 1.39839999999996, 1.39879999999996, 1.39919999999996, 1.39959999999996]"}︡{"stdout":"\n"}︡
︠d02f2bce-33e1-4c27-b3f5-738953da31fc︠
for t in s:
    print t
︡9b8b7a87-ce6d-4a1b-847a-c2eb4ae1d92e︡{"stderr":"Error in lines 1-2\nTraceback (most recent call last):\n  File \"/mnt/home/uHNlUmEE/.sagemathcloud/sage_server.py\", line 633, in execute\n    exec compile(block+'\\n', '', 'single') in namespace, locals\n  File \"\", line 1, in <module>\nTypeError: 'ParallelFunction' object is not iterable\n"}︡
︠783dfb1a-7788-402d-9ed7-8f2bbfcdf566︠
s[0].right()
︡c7d9803a-bd4e-4c7c-a184-e830a0c81454︡{"stdout":"2.9016017263064203e-05\n"}︡
︠811b9726-2b40-41b6-871d-4fc477a6c275︠
tp.plot(1)
︡1e8eaab8-0326-430d-963c-e25ecd4cc162︡{"once":false,"file":{"show":true,"uuid":"e946406c-7a7c-42ed-8dfe-4ac9e4f8d680","filename":"/mnt/home/uHNlUmEE/.sage/temp/compute1a/5158/tmp_vqTmCD.png"}}︡
︠e7489ba7-0b65-444f-a259-83e534c0f352︠
Q = tp.plot(1.4, func=x)
︡e0666c39-a3c6-4664-aebb-68fcc7200409︡
︠99a716a4-19c3-4166-933f-a7738db50e4f︠
P = tp.plot(1.2)

︡8831ad95-5d02-439d-bfc9-4d1c20cec416︡
︠2e788f15-4d76-47c3-9906-1ee38133c7d9︠
P
︡22af0df3-57fb-4e58-8835-5c593781e218︡{"once":false,"file":{"show":true,"uuid":"a0501318-b97f-4aed-8991-ffc55bfba1cb","filename":"/mnt/home/uHNlUmEE/.sage/temp/compute1a/5158/tmp_bbaGtC.png"}}︡
︠541cdf61-04b3-4101-9ab9-4e4f862d6de8︠
P + plot(0.00013436328878819494*x^5.10130413850432, (x, 0, log(10**18)), color='red')
︡192f9b9c-7bf1-4ad6-a723-04fbdbc2256e︡{"once":false,"file":{"show":true,"uuid":"50877c46-3b2f-406f-a13d-0550f09a0255","filename":"/mnt/home/uHNlUmEE/.sage/temp/compute1a/5158/tmp_eSLLN9.png"}}︡
︠54b7a309-d93f-4c64-b173-ec02569c367a︠


P + plot(0.004158323595249009*x^3.4936973539430136, (x, 0, log(10**18)), color='green')
︡f47e7c62-5b0b-431c-ac1e-7d4af87eb8f7︡{"once":false,"file":{"show":true,"uuid":"0e16ad28-758e-4429-ae98-b92941605759","filename":"/mnt/home/uHNlUmEE/.sage/temp/compute1a/5158/tmp_yCGSFS.png"}}︡
︠4591c454-17f1-4f77-9c29-0ff8e4575c04︠
tp.plot(1.2)
︡fd4a32d3-3fd4-429b-9c2e-2ae7c7a7f118︡{"once":false,"file":{"show":true,"uuid":"a0501318-b97f-4aed-8991-ffc55bfba1cb","filename":"/mnt/home/uHNlUmEE/.sage/temp/compute1a/5158/tmp_T3ure6.png"}}︡
︠e9392e63-cb92-4d86-a8bd-93d328c35542︠
log._fast_float_?
︡7c76103c-9014-4631-a84e-bd9cac8c6497︡{"stdout":"[]\n"}︡{"stderr":"Traceback (most recent call last):\n  File \"/mnt/home/uHNlUmEE/.sagemathcloud/parsing.py\", line 391, in introspect\n    O = eval(obj if not preparse else preparse_code(obj), namespace)\n  File \"<string>\", line 1, in <module>\nAttributeError: 'function' object has no attribute '_fast_float_'\n"}︡
︠e77a8712-a5c4-4b2b-9ada-d53562cc44f3︠









